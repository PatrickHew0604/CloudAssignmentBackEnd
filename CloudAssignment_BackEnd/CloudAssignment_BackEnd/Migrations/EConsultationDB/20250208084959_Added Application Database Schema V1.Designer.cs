// <auto-generated />
using System;
using CloudAssignment_BackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloudAssignment_BackEnd.Migrations.EConsultationDB
{
    [DbContext(typeof(EConsultationDBContext))]
    [Migration("20250208084959_Added Application Database Schema V1")]
    partial class AddedApplicationDatabaseSchemaV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Address", b =>
                {
                    b.Property<Guid>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressID");

                    b.ToTable("Addresss");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Consultation", b =>
                {
                    b.Property<Guid>("ConsultationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClinicalNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConsultationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DoctorUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PreConsultData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RedFlagStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("priorityLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsultationID");

                    b.HasIndex("DoctorUsername");

                    b.HasIndex("PatientUsername");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Doctor", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConsultationID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConsultationID1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("ConsultationID1");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Image", b =>
                {
                    b.Property<Guid>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.HasKey("ImageID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.MedicalCertificate", b =>
                {
                    b.Property<Guid>("MedicalCertificateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConsultationID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConsultationID1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MedicalCertificateID");

                    b.HasIndex("ConsultationID1");

                    b.ToTable("MedicalCertificates");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Medication", b =>
                {
                    b.Property<Guid>("MedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DosageForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicationID");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Patient", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AddressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UploadedIdentityCardImageID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Username");

                    b.HasIndex("AddressID");

                    b.HasIndex("UploadedIdentityCardImageID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Payment", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ConsultationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentID");

                    b.HasIndex("ConsultationID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Prescription", b =>
                {
                    b.Property<Guid>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConsultationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MedicationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("ConsultationID");

                    b.HasIndex("MedicationID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Consultation", b =>
                {
                    b.HasOne("CloudAssignment_BackEnd.Models.Domain.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudAssignment_BackEnd.Models.Domain.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Feedback", b =>
                {
                    b.HasOne("CloudAssignment_BackEnd.Models.Domain.Consultation", "Consultation")
                        .WithMany()
                        .HasForeignKey("ConsultationID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.MedicalCertificate", b =>
                {
                    b.HasOne("CloudAssignment_BackEnd.Models.Domain.Consultation", "Consultation")
                        .WithMany()
                        .HasForeignKey("ConsultationID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Patient", b =>
                {
                    b.HasOne("CloudAssignment_BackEnd.Models.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudAssignment_BackEnd.Models.Domain.Image", "UploadedIdentityCardImage")
                        .WithMany()
                        .HasForeignKey("UploadedIdentityCardImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("UploadedIdentityCardImage");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Payment", b =>
                {
                    b.HasOne("CloudAssignment_BackEnd.Models.Domain.Consultation", "Consultation")
                        .WithMany()
                        .HasForeignKey("ConsultationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Prescription", b =>
                {
                    b.HasOne("CloudAssignment_BackEnd.Models.Domain.Consultation", "Consultation")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ConsultationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudAssignment_BackEnd.Models.Domain.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("CloudAssignment_BackEnd.Models.Domain.Consultation", b =>
                {
                    b.Navigation("Prescriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
